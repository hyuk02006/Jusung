// 확장 메소드
    static class A
    {
        public static void f1(this int a, int b)
        {
            WriteLine(a + " " + b);
        }
        public static int power(this int a, int b)
        {
            
            int sum = 1;
            for (int i = 0; i < b; i++)
            {
                sum *= a;
            }
            return sum;
        }
    }
    static class B
    {
        public static void f2(this string a)
        {
            WriteLine(a);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            //3.f1(20);
            //int num = 10;
            //num.f1(2);
            int num = 10;
            string s = num.ToString();
            num.f1(10);
            int a = 3;
            int b = a.power(4);

            "tiger".f2();
            string s1 = "Hello c#";
            s1.f2();

        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
C# 구조체
 struct STRU
    {
        public int a;
        public int b;
        public void f1()
        {

        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            STRU s1; //new 키워드가 필요 없이 사용 가능
            s1.a = 10;
            s1.b = 20;
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
튜플 예제
    //tuple(), list, array[], dict{}
    class Program
    {
        static void Main(string[] args)
        {
            //tuple
            var a = (10, 20, 30, 40);
            WriteLine(a.Item1);
            WriteLine(a.Item2);
            WriteLine(a.Item3);
            WriteLine(a.Item4);

            var b = (10);

            var c = ("호랑이", 100);
            WriteLine(c);

            var d = (Name: "호랑이", Age: 100);
            WriteLine(d.Item1 + " " + d.Item2);
            WriteLine(d.Name + " " + d.Age);

            var e = d;
            e.Name = "독수리";
            WriteLine(e);
            WriteLine(d);

            //데이터 분해
            var(n,t) = d;
            WriteLine(n + " " + t);

        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
인터페이스 

interface IBank
    {
        void f1(string s);
    }

    class KB : IBank
    {
        public void f1(string a)
        {
            WriteLine(a);
        }
    }

    class Monitor
    {
        private IBank bank;
        public Monitor(IBank bank)
        {
            this.bank = bank;
        }
        public void show()
        {
            bank.f1("Hello World!");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            KB kb = new KB();
            Monitor monitor = new Monitor(kb);
            monitor.show();
        }
    }
//////////////////////////////////////////////////////////////////////////////////////////////////
SOLID 원칙 

  interface ILogger
    {
        void WriteLog(string msg);
    }

    class ConsoleLoger:ILogger
    {      
        public void WriteLog(string msg)
        {
           
        }
    }

    class FileLogger : ILogger
    {
        public void WriteLog(string msg)
        {
            //File* pfpt = fopen("sample.txt", "rb");
            //fwrite();
            //fclose(pfpt);
        }
    }
    //S(단일책임의 원칙) O L I D  
    class Monitor
    {
        private ILogger logger;
        public Monitor(ILogger logger)
        {
            this.logger = logger;
        }
        public void start()
        {
            logger.WriteLog("test");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Monitor monitor = new Monitor(new ConsoleLoger());
            monitor.start();
            Monitor monitor1 = new Monitor(new ConsoleLoger());
            monitor1.start();

        }
    }


//////////////////////////////////////////////////////////////////////////////////////////////////

 interface IA
    {
        void f1();
    }

    interface IB : IA
    {
        void f2();
    }

    class C : IB
    {
        public void f1()
        {

        }

        public void f2()
        {

        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            C c = new C(); c.f1(); c.f2();
            if(c != null)
            {
                IA r1 = c;
            }

            IA r1 = c as IA;

        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
C# 에서의 배열

    class Program
    {
        static void Main(string[] args)
        {
            int[] ar = { 1, 2, 3 };
            int[,] br = new int[3, 4];
            int[,] cr = new int[,]
            {
                {1,2,3 },
                {4,5,6 }
            };
            WriteLine(cr.GetLength(0)); //2
            WriteLine(cr.GetLength(1)); //3
            for (int i = 0; i < cr.GetLength(0); i++)
            {
                for (int j = 0; j < cr.GetLength(1); j++)
                {
                    //Write("[{0} {1}]", i,j);
                    Write($"{cr[i, j]} ");
                }
                WriteLine();
            }
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
IEnumerator, 제네릭

class A
    {
        public IEnumerator GetEnumerator()
        {
            //yield : 함수의 종류를 보류한다.
            WriteLine(1);
            yield return 100;

            WriteLine(2);   //시작
            yield return 200;
            
            WriteLine(3);   //시작
            yield break;           
        }
    }
    class Program
    {
        static void show<T>(IEnumerable<T> vs)
        {
            foreach (var item in vs)
            {
                WriteLine(item + " ");
            }
            WriteLine();
        }

        static void Main(string[] args)
        {
            int[] ar = { 1, 2, 3 };
            show(ar);
            string[] br = { "tiger", "lion", "cat" };
            show(br);

            A a = new A();
            //foreach가 GetEnumerator()가 호출
            foreach (var item in a)
            {
                WriteLine(item);
            }
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////
예제1)
class Tiger<T> 
    {
        public T[] ar = new T[3];
        public void f1(T test)
        {
            T t = test;
        }
    };
    class Tiger { }
    class Program
    {
   
        static void copy<T>(T[] dest, T[] src)
        {
            for (int i = 0; i <src.Length; i++)
            {
                dest[i] = src[i];
            }
        }

        static void swap<T>(ref T a, ref T b)
        {
            T t = a;
            a = b;
            b = t;
        }

        static void Main(string[] args)
        {
            Tiger<int> t1 = new Tiger<int>();
            Tiger<string> t2 = new Tiger<string>();

            //
            List<int> mm = new List<int>();
            List<string> mm2 = new List<string>();
            List<Tiger> mm3 = new List<Tiger>();
            mm.Add(10);

            int[] ar = { 1, 2, 3 };
            int[] br = new int[ar.Length];

            string[] cr = { "cat", "dog", "tiger" };
            string[] dr = new string[br.Length];
            copy<int>(br, ar);
            copy<string>(dr, cr);

            foreach (var item in br)
            {
                Write(item+ " ");
            }
            WriteLine();

            string s1 = "호랑이";
            string s2 = "덕수리";

            WriteLine(s1 + s2);
            swap<string>(ref s1, ref s2);
            WriteLine(s1);
            
        }
    }
//////////////////////////////////////////////////////////////////////////////////////////////////
예제2)
 class MyList<T>
    {
        private T[] arr;
        public MyList()
        {
            arr = new T[3];
        }

        public T this[int index]
        {
            get 
            {
                WriteLine("get 사용됨");
                return arr[index];
            } 
            set 
            {
                WriteLine("set 사용됨");
                arr[index] = value;
            }
        }

        //Property
        public int Length
        {
            get 
            {
                return arr.Length;
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            MyList<int> mm = new MyList<int>();
            //mm[0] = 10;
            //WriteLine(mm[0]);
            MyList<string> mm2 = new MyList<string>();
            mm2[0] = "호랑이1";
            mm2[1] = "호랑이2";
            mm2[2] = "호랑이3";

            for (int i = 0; i < mm2.Length; i++)
            {
                WriteLine(mm2[i]);
            }
        }
    }