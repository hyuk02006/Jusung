Oracle
App은 OS(Window) or System 드라이브는 피해서 설치 해야함(권장)
=>가상 메모리의 최적화 (최적화 크기 = 실제메모리 1.5배)
CTL(오라클 관리 -> 1개)
LOG(DML 명령저장)
DBF(하드디스크)

=======================================================
* 오라클 완전삭제
1. uninstall(설치화면) -<설치된 제품 > -> 선택후 제거
2. 레지스트리에서 삭제(regedit)
    -hkey_local-machine
		-software\oracle :삭제
		-system\controlset~중 1개 \service\ora~: 삭제
=>재부팅
3. 물리적으로 관련 폴더 삭제
	-OS:\program files\oracle
	-설치드라이브:\app

========================================================
conn system/password -> 연결
conn sys/password as sysdba  / conn sys/as sysdba -> 연결 

========================================================
Default 계정
-conn scott /tiger

연습계정 잠김해제 및 암호변경
-alter user scott account unlock identified by tiger; -> 계정 아이디 비밀번호 변경

-SQL*PLUS 명령(Tool명령) & SQL명령(DBMS 명령)
=한줄 코딩 (; 사용안함)
=사용한 명령이 버퍼에 기억되지 않음(SQL 명령은 마지막 사용명령 기억)

========================================================
테이블
- 1개이상을 컬럼이 존재하는 것

*데이터 타입
-숫자 :number(x): 정수형 / number(x,y):실수형 (x-전체자리수,y-소수이하자리수)
-문자:char(x) :고정형/ varchar2(x) :가변형(하드디스크 반환=동적 데이터X) - row chain =>튜닝(row migration) / 엑세스 속도가 떨어짐 
-날짜:date(8byte): '(yy)rr/mm/dd' '21/06/11' 날짜도 비교 연산이 됨
(yy: 무조건 현세기, rr : 0~49 현, 50~99 전세기)
-멀티미디어 : raw / clob & blob
-파일 관련 명령 : @ ,ed

========================================================  
정렬은 행 주소 순서로 정렬됨 (저장은 행단위로 함) -insert한 순서가 아님
대량 데이터가 저장되는 경우 분산해서 저장(파티셔닝 테이블)

========================================================  
연산자
-select 컬럼명 (as) "컬럼별칭" 항상 컬럼 별칭을 씀 ,... from 테이블명,... //제한됨 컬럼***을 추출

-where 컬럼명 조건...// 제한된 행***을 추출 : 조건절에 참이 행만 추출대상
-조건에 사용되는 연산자
1.산술 연산자 : + ,- ,* , / ,mod(10,3) =1(나머지 구하는 함수)
2.관계 연산자 : =, !=(<>) , >= ,<=
3.문자열 연산자 : like(%
-------------------------------
4.논리 연산자 : not , and  > or 

--10번 부서인 사람 추출
select ename "이름이요",deptno "부서번호요"  from emp where deptno=10;

--급여가 1000~2000이상인 사람을 추출
select ename "이름 ",sal "급여" from emp where sal>=1000 and sal <=2000;	//1000~2000이 아닌 : sal <1000 or sal>2000
select ename "이름 ",sal "급여" from emp where sal between 1000 and 2000;

--업무(job)가 salesman,clerk인 사람
 select ename "이름", job "직업" from emp where job= 'SALESMAN'or job='CLERK'; //데이터의 대소놰문자를 구분 (대문자 upper & 소문자 lower)
--	job in('salesman','clerk') //in (A,B) : A or B or...

--커미션이 null인 사람 추출
select ename "이름 ",comm "커미션" from emp where comm is null;	//null은 비교연산 할 수 없다.

--insert
insert into emp(empno,ename,hiredate) values(101,'홍동우',sysdate);

--입사일이 '21/01/01'~'21/06/11'인 사람을 추출(A~B날짜 제한)
select ename "이름" ,empno "회번", hiredate"입사일" from emp where hiredate>='87/01/01' and hiredate <'21/06/12';

--입사일 '21/06/11' 자정~ 오후 6시까지인 사람을 추출(시간제한)
'21/06/11 18:00:00'
select ename "이름" ,empno "회번", hiredate"입사일" from emp where hiredate>=to_date('21/01/01 00:00:00' ,'yy/mm/dd hh24:mi:ss') and
                                                hiredate <=to_date('21/06/11 18:00:00','yy/mm/dd hh24:mi:ss');

--[xx의 급여는 xxx이다] 형태로 추출( ||: 연결 연산자)
select ename ||'의 급여는' || sal || '입니다' 소개 from emp; 

--사원명,급여,커미션,총급여(급여+커미션)을 추출 //null 대체 함수 : nvl(컴럼,대체값)
 select ename "이름",sal "급여" ,nvl( comm,0) "커미션", nvl(sal+comm,0) "총급여" from emp ;

--이름이 A로 시작하는 사람을 추출
select ename from emp where ename like'A%';

--이름 두 번째 문자가 L인 사람을 추출
select ename from emp where ename like'_L%';
--이름 L이 두번 이상 포함되는  사람을 추출
select ename from emp where ename like'%L%L%';
========================================================  
부정연산자를 사용하면 index가 걸려있어도 fulltable scan을 함 >성능 저하

















